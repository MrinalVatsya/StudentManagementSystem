/**
 * 
 */
package com.mind.poc;

import java.util.Iterator;
import java.util.LinkedList;

/**
 * @author mrinalvatsya
 *
 */
public class Graph {
	
	private int V;//no of vertices..
	
	private LinkedList<Integer> adj[];
	
	Graph(int v)
	{
		this.V = v;
		
		for(int i = 0; i < v; i++)
		{
			adj[i] = new LinkedList();
		}
	}
	
	//for adding edge to graph
	void addEdge(int u , int v)
	{
		adj[u].add(v);
	}
	
	void dfsHelper(int v, boolean visited[])
	{
		if(!visited[v])
			visited[v] = true;
		System.out.println(v + " ");
		
		//iterate neighbours of this visited node..
		Iterator<Integer> adjacentNodeList = adj[v].iterator();
		while(adjacentNodeList.hasNext())
		{
			int n = adjacentNodeList.next();
			if(!visited[n])
			{
				dfsHelper(n, visited);
			}
		}
	}
	
	void dfs()
	{
		boolean visited[] = new boolean[V];
		
		for(int i = 0 ; i < V; i++)
		{
			if(!visited[i])
				dfsHelper(i, visited);
		}
	}
	public static void main(String[] args) {
		Graph g = new Graph(4);
		 g.addEdge(0, 1); 
	        g.addEdge(0, 2); 
	        g.addEdge(1, 2); 
	        g.addEdge(2, 0); 
	        g.addEdge(2, 3); 
	        g.addEdge(3, 3); 
	  
	        System.out.println("Following is Depth First Traversal"); 
	  
	        g.dfs(); 
	}
}


