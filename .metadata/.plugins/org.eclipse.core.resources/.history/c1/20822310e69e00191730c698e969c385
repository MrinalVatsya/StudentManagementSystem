package com.mind.poc;

import java.util.Scanner;

class Node  
{ 
    int data; 
    Node left, right, nextRight; 
   
    Node(int item)  
    { 
        data = item; 
        left = right = null; 
    } 
} 
public class BinaryTree2 {
	
	Node root;
	
	public int isSumPossible(Node node)
	{
		return isSumTree(node, 0);
	}
	
	public int isSumTree(Node node, int sum)
	{
		if(node == null)
		{
			return 0;
		}
		
		if(node.left==null&&node.right==null)
		{
			sum = sum + node.data;
			return sum;
		}
		
		int ls = isSumTree(node.left, sum);
		int rs = isSumTree(node.right, sum);
		
		if(ls+rs==node.data)
			return ls+rs+node.data;
		
		return 0;
	}
	
	 public static void main(String args[])  
	    { 
	        BinaryTree2 tree = new BinaryTree2(); 
	        tree.root = new Node(26); 
	        tree.root.left = new Node(10); 
	        tree.root.right = new Node(3); 
	        tree.root.left.left = new Node(4); 
	        tree.root.left.right = new Node(6); 
	        tree.root.right.right = new Node(3); 
	   
	        if (tree.isSumPossible(tree.root) != 0) 
	            System.out.println("The given tree is a sum tree"); 
	        else
	            System.out.println("The given tree is not a sum tree"); 
	    } 

}


//An LCS based Java program to find minimum 
//number insertions needed to make a string 
//palindrome 
class GFG 
{ 
	
	private static Scanner sc = new Scanner(System.in);
	static int lcs( String X, String Y, int m, int n ) 
	{ 
		int L[][] = new int[n+1][n+1]; 
		int i, j; 

		for (i=0; i<=m; i++) 
		{ 
			for (j=0; j<=n; j++) 
			{ 
				if (i == 0 || j == 0) 
					L[i][j] = 0; 

				else if (X.charAt(i-1) == Y.charAt(j-1)) 
					L[i][j] = L[i-1][j-1] + 1; 

				else
					L[i][j] = Integer.max(L[i-1][j], L[i][j-1]); 
			} 
		} 

		return L[m][n]; 
	} 

	static int findMinInsertionsLCS(String str, int n) 
	{ 
		// Using StringBuffer to reverse a String 
		StringBuffer sb = new StringBuffer(str); 
		sb.reverse(); 
		String revString = sb.toString(); 

		// The output is length of string minus 
		// length of lcs of str and it reverse 
		return (n - lcs(str, revString , n, n)); 
	} 

	// Driver program to test above functions 
	public static void main(String args[]) 
	{ 
		String str = "geeks"; 
		System.out.println( 
		findMinInsertionsLCS(str, str.length())); 
	} 
} 
//This code is contributed by Sumit Ghosh 
