package com.mind.poc;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

public class GraphforBfs {

	private int v;
	private LinkedList<Integer> adj[];
	
	public GraphforBfs(int v)
	{
		this.v = v;
		adj = new LinkedList[V];
		for(int i = 0 ; i < v ; i++)
		{
			adj[i] = new LinkedList<>();
		}
	}
	
	void addEdge(int u, int v)
	{
		adj[u].add(v);
	}
	
	void BFS(int s)
	{
		boolean visited[] = new boolean[v];
		for(int i = 0; i < v ; i++)
		{
			visited[i] = false;
		}
		
		visited[s] = true;
		Queue<Integer> queue = new LinkedList<>();
		queue.add(s);
		while(queue.size() != 0)
		{
			 s = queue.poll();
			 System.out.println(s + " ");
			 Iterator<Integer> i = adj[s].listIterator();
			 while(i.hasNext())
			 {
				 int n = i.next();
				 if(!visited[n])
				 {
					 visited[n] = true;
					 queue.add(n);
				 }
			 }
		}
	}
	
	public static void main(String args[]) 
	{ 
	    GraphforBfs g = new GraphforBfs(4); 

	    g.addEdge(0, 1); 
	    g.addEdge(0, 2); 
	    g.addEdge(1, 2); 
	    g.addEdge(2, 0); 
	    g.addEdge(2, 3); 
	    g.addEdge(3, 3); 

	    System.out.println("Following is Breadth First Traversal "+ 
	                       "(starting from vertex 2)"); 

	    g.BFS(2); 
	} 
}

