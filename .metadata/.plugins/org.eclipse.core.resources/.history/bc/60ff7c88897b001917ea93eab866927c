/**
 * 
 */
package com.mind.poc;

import java.util.Arrays;
import java.util.List;

/**
 * @author mrinalvatsya
 *
 */
public class LengthLongestSubsequence {
	
	 public int longestSubsequenceLength(final List<Integer> a) {
		 	
		 int i , j , n = a.size();
		 
		 int lis[] = new int[n];
		 Arrays.fill(lis, 1);
		 for(i = 1; i < n; i++)
		 {
			 for(j = 0; j < i; j++)
			 {
				 if(a.get(j) < a.get(i))
				 {
					 lis[i] = Math.max(lis[i], lis[j] + 1);
				 }
			 }
		 }
		 System.out.println("Longest Length in forward array is : "+ lis[n-1]);
		 for(i = 0; i < n; i++)
		 {
			 System.out.print(lis[i]+" ");
		 }
		
		 int lps[] = new int[n];
		 Arrays.fill(lps, 1);
		 
		 for(i = n-2; i > 0; i--)
		 {
			 for(j = n-1; j > i; j--)
			 {
				 if(a.get(j) < a.get(i) && lps[i] == lps[j] + 1)
				 {
					 lps[i] = Math.max(lps[i], lps[j] + 1);
				 }
			 }
		 }
		 int maxLen = 0;
		 for(i = 1; i <= n-2; i++)
		 {
			 maxLen = Math.max(maxLen, lis[i] + lps[i] - 1);
		 }
		 
		 System.out.println(maxLen);
		 return maxLen;
		 
	    }
	 
	 public static void main(String[] args) {
		
		 LengthLongestSubsequence obj = new LengthLongestSubsequence();
		 obj.longestSubsequenceLength(Arrays.asList(1 ,11, 2, 10, 4, 5, 2, 1));
	}

}
