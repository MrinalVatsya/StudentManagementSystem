/**
 * 
 */
package com.mind.legalOne.admin.common;

import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.io.FilenameUtils;
import org.springframework.web.multipart.MultipartFile;

import com.mind.legalOne.admin.exception.LegalOneRuntimeException;
import com.mind.legalOne.admin.exception.ValidationException;

/**
 * @author maneeshkpandey
 *
 */
public class CommonUtils {

	public static void copyProperties(final Object dest, final Object orig) {

		try {

			BeanUtils.copyProperties(dest, orig);

		} catch (IllegalAccessException | InvocationTargetException e) {

			throw new LegalOneRuntimeException(e);
		}
	}

	public static String getUIDisplayDate(LocalDateTime date) {

		DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MMM-YYYY");
		return date.format(dateTimeFormatter);

	}

	public static String getDateForMeetingFolderName(LocalDate date) {

		DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		return date.format(dateTimeFormatter);
	}

	public static String getDateForMailRefNumber(LocalDateTime date) {

		DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyyMMdd");
		return date.format(dateTimeFormatter);
	}

	public static String getDateForMail(LocalDateTime date) {

		DateTimeFormatter dateFormatYYMMDDHHMMSS = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
		return date.format(dateFormatYYMMDDHHMMSS);
	}

	public static LocalDate convertDBValueToDate(String date) {

		DateTimeFormatter dateFormatDDMMMYYYY = DateTimeFormatter.ofPattern("dd/MMM/yyyy");
		return LocalDate.parse(date, dateFormatDDMMMYYYY);
	}

	public static LocalDateTime getSyncDateTime(String date) {

		if (date == null || date.length() == 0) {
			return null;
		}
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyMMddHHmmss");
		LocalDateTime dateTime = LocalDateTime.parse(date, formatter);

		return dateTime;
	}

	public static void validateUploadFiles(MultipartFile[] uploadfiles) {

		if (uploadfiles == null || uploadfiles.length == 0) {
			throw new ValidationException("One pdf file required.");
		}
		for (MultipartFile file : uploadfiles) {

			if (file.isEmpty()) {
				throw new ValidationException("File can not be empty");
			}

			String fileName = file.getOriginalFilename();
			String fileExtension = FilenameUtils.getExtension(fileName);
			if (!"pdf".equalsIgnoreCase(fileExtension)) {
				throw new ValidationException("Only pdf file can be uploaded");
			}
		}
	}

	public static LocalDate getCurrentDate() {
		return LocalDate.now();
	}

	public static LocalDateTime getCurrentDateTime() {
		return LocalDateTime.now();
	}

	public static void writeFileOnResponseOutputStream(HttpServletResponse rs, InputStream inputStream) {
		try {

			byte[] buff = new byte[256];
			int lastRead = 0;
			while ((lastRead = inputStream.read(buff)) != -1) {
				rs.getOutputStream().write(buff, 0, lastRead);
			}
			rs.flushBuffer();
		} catch (IOException e) {
			throw new LegalOneRuntimeException(e);
		}
	}

	public static void evaluate(String expression, Map<Long, Set<Long>> idMap) {

		char[] tokens = expression.toCharArray();
		Stack<Long> values = new Stack<Long>();
		Stack<Character> ops = new Stack<Character>();

		for (int i = 0; i < tokens.length; i++) {
			if (tokens[i] == ' ')
				continue;

			if (tokens[i] >= '0' && tokens[i] <= '9') {
				StringBuffer sbuf = new StringBuffer();

				while (i < tokens.length && tokens[i] >= '0' && tokens[i] <= '9')
					sbuf.append(tokens[i++]);
				values.push(Long.parseLong(sbuf.toString()));
			}

			else if (tokens[i] == '(')
				ops.push(tokens[i]);

			else if (tokens[i] == ')') {
				while (ops.peek() != '(')
					values.push(applyOp(ops.pop(), values.pop(), values.pop(), idMap));
				ops.pop();
			}

			// Current token is an operator.
			/*
			 * else if (tokens[i] == '+' || tokens[i] == '-' || tokens[i] == '*' ||
			 * tokens[i] == '/')
			 */
			else if (tokens[i] == '&' || tokens[i] == '|') {
				while (!ops.empty() && hasPrecedence(tokens[i], ops.peek()))
					values.push(applyOp(ops.pop(), values.pop(), values.pop(), idMap));

				ops.push(tokens[i]);
			}
		}

		if (ops.empty()) {
			idMap.put(0L, idMap.get(values.pop()));
		} else {
			while (!ops.empty())
				values.push(applyOp(ops.pop(), values.pop(), values.pop(), idMap));
		}

	}

	// operator precedence table..
	public static boolean hasPrecedence(char op1, char op2) {
		if (op2 == '(' || op2 == ')')
			return false;
		if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-'))
			return false;
		else
			return true;
	}

	public static Long applyOp(char op, Long b, Long a, Map<Long, Set<Long>> idMap) {
		Set<Long> aList = idMap.get(a);
		Set<Long> bList = idMap.get(b);
		switch (op) {
		case '&': {
			aList.retainAll(bList);
			idMap.put(0L, aList);
		}
		case '|': {
			aList.addAll(bList);
			idMap.put(0L, aList);
		}
		}
		return 0L;
	}
	public static int getMinutes(String zoneId)
	{
		ZoneId z = ZoneId.of(zoneId);
		LocalDateTime ldt = LocalDateTime.now(z);
		System.out.println(z.getRules().getOffset(ldt));

		ZoneOffset offset = z.getRules().getOffset(ldt);
		System.out.println(offset.getTotalSeconds());
		int TotalSeconds = offset.getTotalSeconds();
		int minutes = TotalSeconds/60;
		return minutes;
	}

	public static LocalDate getUTCDate(LocalDate date, String time)
	{
		DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ISO_LOCAL_TIME;
		LocalTime meetingTime = LocalTime.parse(time, dateTimeFormatter);
		LocalDateTime dateTime = date.atTime(meetingTime);

		String zoneId = "Asia/Tokyo";
		long minutes = CommonUtils.getMinutes(zoneId);
		LocalDateTime meetingUtcTime = dateTime.minusMinutes(minutes);

		DateTimeFormatter dateformatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		String dateInDb = meetingUtcTime.format(dateformatter);
		LocalDate finalDate = LocalDate.parse(dateInDb);

		return finalDate;

	}

	public static String getUTCTime(LocalDate date, String time)
	{
		DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ISO_LOCAL_TIME;
		LocalTime meetingTime = LocalTime.parse(time, dateTimeFormatter);
		LocalDateTime dateTime = date.atTime(meetingTime);

		String zoneId = "Asia/Tokyo";
		long minutes = CommonUtils.getMinutes(zoneId);
		LocalDateTime meetingStartUtcTime = dateTime.minusMinutes(minutes);
		DateTimeFormatter timeformatter = DateTimeFormatter.ofPattern("HH:mm");
		String utcTime = meetingStartUtcTime.format(timeformatter);
		
		return utcTime;
	}
}


