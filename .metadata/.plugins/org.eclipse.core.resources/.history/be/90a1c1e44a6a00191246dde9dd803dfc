/**
 * 
 */
package com.mind.poc;

/**
 * @author mrinalvatsya
 *
 */
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class LCSReturns {

  static int tutzkiAndLcs(String a, String b) {

        int m = a.length();
        int n = b.length();
        int i = 0 , j = 0;
        
        List<Integer> positionList = null;
        Map<Character, List<Integer>> positionMap = new HashMap<>();
        for(i = 1; i <= n; i++)
        {
            char ch = b.charAt(i-1);
            if(!positionMap.containsKey(ch))
            {
                positionList = new ArrayList<>();
                positionList.add(i);
                positionMap.put(ch, positionList);
            }
            else
            {
                positionList = positionMap.get(ch);
                positionList.add(i);
                positionMap.put(ch, positionList);
            }
        }
    


        int lps[][] = new int[m+2][n+2];
        int lss[][] = new int[m+2][n+2];

        for(i = 0; i < lps.length; i++)
        {
            for(j = 0; j < lps[i].length; j++)
                lps[i][j] = lss[i][j] = 0;
        }

        //compute prefix LCS..
        for(i = 1; i <= m; i++)
        {
            for(j = 1; j <= n; j++)
            {
                if(a.charAt(i-1)==b.charAt(j-1))
                {
                    lps[i][j] = lps[i-1][j-1] + 1;
                }
                else
                {
                    lps[i][j] = Math.max(lps[i][j-1], lps[i+1][j]);
                }
            }
        }
        System.out.println("Longest Common Subsequence is : " + lps[m][n]);

        //compute suffix LCS..
        for(i = m; i >= 1; i--)
        {
            for(j = n; j >= 1; j--)
            {
                if(a.charAt(i-1)==b.charAt(j-1))
                {
                    lss[i][j] = lss[i+1][j+1] + 1;
                }
                else
                {
                    lss[i][j] = Math.max(lss[i][j+1], lss[i+1][j]);
                }
            }
        }
        System.out.println("Prefix SubArray is :-------------");
        for(i = 0; i < m; i++)
        {
        	for(j = 0; j < n; j++)
        	{
        		System.out.print(lps[i][j] + " ");
        	}
        	System.out.println();
        }
        
        System.out.println("Suffix SubArray is :-------------");
        for(i = 0; i < m; i++)
        {
        	for(j = 0; j < n; j++)
        	{
        		System.out.print(lss[i][j] + " ");
        	}
        	System.out.println();
        }
        
        
        int ways = 0;
        for(i = 0; i <= m; i++)
        {
            for(char ch = 'a' ; ch <= 'z' ; ch++)
            {
                if(!positionMap.containsKey(ch))
                {
                    continue;
                }
                
                for(j = 0; j < positionMap.get(ch).size(); j++)
                {
                    int p = positionMap.get(ch).get(j);//matching position found..s
                    if(lps[i][p-1] + lss[i+1][p+1] == lps[m][n])
                    {
                        ways++;
                    }
                }
            }
        }
        System.out.println(ways);
        return ways;

    }
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("D://Solution.txt"));

        String a = scanner.nextLine();

        String b = scanner.nextLine();

        int result = tutzkiAndLcs(a, b);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}
