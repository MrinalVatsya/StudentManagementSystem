package com.mind.poc;


//A Java program to print topological sorting of a DAG 
import java.io.*; 
import java.util.*; 

//This class represents a directed graph using adjacency 
//list representation 
class Graph1 
{ 
	private static Scanner sc = new Scanner(System.in);
	private int V; // No. of vertices 
	private LinkedList<Integer> adj[]; // Adjacency List 
	private static Map<Integer, String> nameMap = new HashMap<>();
	private static Map<String, Integer> reverseNameMap = new HashMap<>();

	//Constructor 
	Graph1(int v) 
	{ 
		V = v; 
		adj = new LinkedList[v]; 
		for (int i=0; i<v; ++i) 
			adj[i] = new LinkedList(); 
	} 

	// Function to add an edge into the graph 
	void addEdge(int v,int w) { adj[v].add(w); } 

	// A recursive function used by topologicalSort 
	void topologicalSortUtil(int v, boolean visited[], 
							Stack stack) 
	{ 
		// Mark the current node as visited. 
		visited[v] = true; 
		Integer i; 

		// Recur for all the vertices adjacent to this 
		// vertex 
		Iterator<Integer> it = adj[v].iterator(); 
		while (it.hasNext()) 
		{ 
			i = it.next(); 
			if (!visited[i]) 
				topologicalSortUtil(i, visited, stack); 
		} 

		// Push current vertex to stack which stores result 
		stack.push(new Integer(v)); 
	} 

	// The function to do Topological Sort. It uses 
	// recursive topologicalSortUtil() 
	void topologicalSort() 
	{ 
		Stack stack = new Stack(); 

		// Mark all the vertices as not visited 
		boolean visited[] = new boolean[V]; 
		for (int i = 0; i < V; i++) 
			visited[i] = false; 

		// Call the recursive helper function to store 
		// Topological Sort starting from all vertices 
		// one by one 
		for (int i = 0; i < V; i++) 
			if (visited[i] == false) 
				topologicalSortUtil(i, visited, stack); 

		// Print contents of stack 
		while (stack.empty()==false) 
		{.
			if(stack.size()==1)
			{
				break;
			}
			System.out.print(nameMap.get(stack.pop()) + " ");
		}
	} 

	// Driver method 
	public static void main(String args[]) 
	{ 
		// Create a graph given in the above diagram  
//		g.addEdge(0, 1); 
//		g.addEdge(0, 2); 
//		g.addEdge(1, 2); 
//		g.addEdge(4, 1); 
//		g.addEdge(2, 3); 
//		g.addEdge(3, 1); 

		int n = sc.nextInt();
		Graph1 g = new Graph1(n);
		int count = 0;
		while(n-- > 0)
		{
			String st = sc.next();
			nameMap.put(count, st);
			reverseNameMap.put(st, count);
			count++;
		}
		
		int m = sc.nextInt();
		while(m-- > 0)
		{
			String p1 = sc.next();
			String p2 = sc.next();
			int u = reverseNameMap.get(p1);
			int v = reverseNameMap.get(p2);
			g.addEdge(u, v);
		}
			
		g.topologicalSort(); 
	} 
} 
//This code is contributed by Aakash Hasija 
