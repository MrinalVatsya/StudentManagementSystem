/**
 * 
 */

/**
 * @author mrinalvatsya
 *
 */


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

public class FinalAesTest {
	
	    public static final byte[] KEY = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'};

	    private static Cipher ecipher;
	    private static Cipher dcipher;

	    static {
	        try {
	            ecipher = Cipher.getInstance("AES");
	            SecretKeySpec eSpec = new SecretKeySpec(KEY, "AES");
	            ecipher.init(Cipher.ENCRYPT_MODE, eSpec);
	        } catch (Exception e) {
	            throw new RuntimeException(e);
	        }


	        try {
	            dcipher = Cipher.getInstance("AES");
	            SecretKeySpec dSpec = new SecretKeySpec(KEY, "AES");
	            dcipher.init(Cipher.DECRYPT_MODE, dSpec);
	        } catch (Exception e) {
	            throw new RuntimeException(e);
	        }
	    }

	    public static String encrypt(File inputFile, File outputFile) throws IOException {
	    	
	    	 FileInputStream inputStream = new FileInputStream(inputFile);
           byte[] inputBytes = new byte[(int) inputFile.length()];
           String inputStringBase64Encoded = Base64.encodeBase64String(inputBytes);
           inputStream.read(inputBytes);
           inputStream.close();
	        byte[] encryptedValue;
	        try {
	            encryptedValue = ecipher.doFinal(inputBytes);
	           
	            FileOutputStream outputStream = new FileOutputStream(outputFile);
	            outputStream.write(encryptedValue);
	            outputStream.close();
	            
	            return Base64.encodeBase64String(encryptedValue);
	        } catch (Exception e) {
	            throw new IllegalArgumentException(e);
	        }
	    }

	    /**
	     * USE THIS FEATURE IN JAVASCRIPT-SIDE
	     */
	    /*
	    public static String decrypt(String encryptedValue) {
	        byte[] decryptedValue = Base64.decodeBase64(encryptedValue.getBytes());
	        byte[] decValue;
	        try {
	            decValue = dcipher.doFinal(decryptedValue);
	            return new String(decValue);
	        } catch (Exception e) {
	            throw new IllegalArgumentException(e);
	        }
	    }
	     */

	    public static void main(String args[]) throws IOException {
	        String keyForJS = Base64.encodeBase64String(KEY);
	        System.out.println("THIS KEY WILL BE USED FOR JS-SIDE = " + keyForJS);

	        File inputFile = new File("C:/Users/mrinalvatsya/Desktop/EncryptedTest/Sample.pdf");
	        File encryptedFile = new File("C:/Users/mrinalvatsya/Desktop/EncryptedTest/encrypted.pdf");
	        File decryptedFile = new File("C:/Users/mrinalvatsya/Desktop/EncryptedTest/decrypted.pdf");
	        System.out.println("ENCRYPTED = " + FinalAesTest.encrypt(inputFile,encryptedFile));
	    }
	

}
