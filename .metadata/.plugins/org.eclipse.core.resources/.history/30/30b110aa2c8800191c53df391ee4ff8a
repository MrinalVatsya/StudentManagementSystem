import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

public class LastEncryption {

   static void fileProcessor(int cipherMode,String key,File inputFile,File outputFile){
	 try {
	       Key secretKey = new SecretKeySpec(key.getBytes(), "AES");
	       Cipher cipher = Cipher.getInstance("AES");
	       cipher.init(cipherMode, secretKey);

	       FileInputStream inputStream = new FileInputStream(inputFile);
	       byte[] inputBytes = new byte[(int) inputFile.length()];
	       inputStream.read(inputBytes);
	       
	       ///////////////////////////////////////
	       String inputUtf8String = new String(inputBytes, "UTF-8");
	        System.out.println("InputUtf8String is : " + inputUtf8String);
	       ///////////////////////////////////////

	       byte[] outputBytes = cipher.doFinal(inputUtf8String.getBytes());
	       String encryptedString = Base64.encodeBase64String(outputBytes);
	  
	       FileOutputStream outputStream = new FileOutputStream(outputFile);
	       outputStream.write(outputBytes);

	       inputStream.close();
	       outputStream.close();

	    } catch (NoSuchPaddingException | NoSuchAlgorithmException 
                     | InvalidKeyException | BadPaddingException
	             | IllegalBlockSizeException | IOException e) {
		e.printStackTrace();
            }
     }
	
     public static void main(String[] args) {
	String key = "This is a secret";
	File inputFile = new File("C:/Users/mrinalvatsya/Desktop/EncryptedTest/sample.pdf");
	File encryptedFile = new File("C:/Users/mrinalvatsya/Desktop/EncryptedTest/VarunTest.pdf");
	File decryptedFile = new File("C:/Users/mrinalvatsya/Desktop/EncryptedTest/decrypted-pdf.pdf");
		
	try {
		LastEncryption.fileProcessor(Cipher.ENCRYPT_MODE,key,inputFile,encryptedFile);
		LastEncryption.fileProcessor(Cipher.DECRYPT_MODE,key,encryptedFile,decryptedFile);
	     System.out.println("Success");
	 } catch (Exception ex) {
	     System.out.println(ex.getMessage());
             ex.printStackTrace();
	 }
     }
	
}