/**
 * 
 */
package com.mind.poc;

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class FibModified {
	
	public static String multiply(String num1, String num2) 
	{ 
		int n1, n2;
	    n1 = num1.length();
	    n2 = num2.length();
	    if (n1 == 0 || n2 == 0) 
	    return "0"; 
	   
	    // will keep the result number in vector 
	    // in reverse order 
	    int result[] = new int[n1+n2+1];
	    
	    for(int i = 0 ; i < result.length ; i++)
	    {
	    	result[i] = 0;
	    }
	   
	    // Below two indexes are used to find positions 
	    // in result.  
	    int i_n1 = 0;  
	    int i_n2 = 0;
	    int sum = 0;
	       
	    // Go from right to left in num1 
	    for (int i=n1-1; i>=0; i--) 
	    { 
	        int carry = 0; 
	        int temp_n1 = num1.charAt(i) - '0';
	   
	        // To shift position to left after every 
	        // multiplication of a digit in num2 
	        i_n2 = 0;  
	           
	        // Go from right to left in num2              
	        for (int j=n2-1; j>=0; j--) 
	        { 
	            // Take current digit of second number 
	        	if(num2.equals("734"))
	        	{
	        		//System.out.println("hi");
	        	}
	        	try {
	            int tempn2 = num2.charAt(j) - '0'; 
	        	}
	        	catch(Throwable t) {
	        		System.out.println("n2: "+n2);
	        		System.out.println("num2: "+num2);
	        		System.out.println("j: "+j);
	        	}
	   
	            // Multiply with current digit of first number 
	            // and add result to previously stored result 
	            // at current position.  
	        	try {
	            sum = (temp_n1)*(tempn2) + result[i_n1 + i_n2] + carry;
	        	}
	        	catch(Throwable e)
	        	{
	        		System.out.println(i_n1);
	        		System.out.println(i_n2);
	        		System.out.println(result.length);
	        	}
	   
	            // Carry for next iteration 
	            carry = sum/10; 
	   
	            // Store result 
	            try {
	            result[i_n1 + i_n2] = sum % 10;
	            }
	            catch(Throwable e)
	            {
	            	System.out.println(result.length);
	            }
	   
	            i_n2++; 
	        } 
	   
	        // store carry in next cell 
	        try {
	        if (carry > 0) 
	            result[i_n1 + i_n2] += carry;
	        }
	        catch(Throwable e)
	        {
	        	System.out.println("i_n1 + i_n2 : -----" +  i_n1 + i_n2  );
	        }
	   
	        // To shift position to left after every 
	        // multiplication of a digit in num1. 
	        i_n1++; 
	    } 
	   
	    // ignore '0's from the right 
	    int i = result.length - 1; 
	    while (i>=0 && result[i] == 0) 
	    i--; 
	   
	    // If all were '0's - means either both or 
	    // one of num1 or num2 were '0' 
	    if (i == -1) 
	    return "0"; 
	   
	    // generate the result String 
	    String s = ""; 
	       
	    while (i >= 0) 
	        s += String.valueOf(result[i--]); 
	   
	    return s; 
	} 

    // Complete the fibonacciModified function below.
    static int fib(int t1, int t2, int n) {

    	int fibArr[] = new int[20];
    	fibArr[0] = t1;
    	fibArr[1] = t2;
    	
    	String num1 = null ;
    	
    	    	
    	for(int i = 2; i <= n; i++)
    	{
    		num1 = String.valueOf(fibArr[i-1]);
    		String mult = multiply(num1,num1);
    		int temp = Integer.parseInt(mult);
    		fibArr[i] = fibArr[i-2]  + temp;
    	}
    	
    	return fibArr[n-1];
    	
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("D://Solution.txt"));

        String[] t1T2n = scanner.nextLine().split(" ");

        int t1 = Integer.parseInt(t1T2n[0]);

        int t2 = Integer.parseInt(t1T2n[1]);

        int n = Integer.parseInt(t1T2n[2]);

        int result = fib(t1, t2, n);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
