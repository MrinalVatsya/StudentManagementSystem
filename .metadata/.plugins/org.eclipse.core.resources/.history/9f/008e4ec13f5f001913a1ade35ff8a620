/**
 * 
 */
package com.mind.poc;

//This class represents a directed graph using adjacency list 
//representation 
//public class TestClass 
//{ 
//	private static int rec(int arr[], int i, int sum)
//	{
//		if(i==arr.length)
//			return sum;
//		return rec(arr,i+1,sum+arr[i]);
//		
//	}	
//	public static void main(String[] args) {
//		int arr[] = new int[3];
//		for(int i = 0 ; i < 3; i++)
//			arr[i] = 1;
//		
//		System.out.println(rec(arr, 0, 0));
//	}
//} 
//This code is contributed by Aakash Hasija 
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class VertexWeightPair1{
    int key;

    int vertex;

    public VertexWeightPair1(int key, int vertex) {
        super();
        this.key = key;
        this.vertex = vertex;
    }

    /**
     * @return the key
     */
    public int getKey() {
        return key;
    }

    /**
     * @param key the key to set
     */
    public void setKey(int key) {
        this.key = key;
    }

    /**
     * @return the vertex
     */
    public int getVertex() {
        return vertex;
    }

    /**
     * @param vertex the vertex to set
     */
    public void setVertex(int vertex) {
        this.vertex = vertex;
    }
}
class MyComparator1 implements Comparator<VertexWeightPair1>{

    @Override
    public int compare(VertexWeightPair1 o1, VertexWeightPair1 o2) {

        return o1.getKey() - o2.getKey();
    }


}
public class TestClass {

    // Complete the prims function below.
    static int prims(int n, int[][] edges, int start) {

        int i, j;
        boolean inMST[] = new boolean[n];

        int key[] = new int[n];

        for(i = 0; i < n ; i++)
            key[i] = Integer.MAX_VALUE;

        int parent[] = new int[n];

        for(i = 0; i < n; i++)
        {
            inMST[i] = false;
        }
        key[start] = 0;
        parent[start] = -1;

        PriorityQueue<VertexWeightPair1> pq = new PriorityQueue<>(new MyComparator1());

        VertexWeightPair1 vtObj = new VertexWeightPair1(key[start], start);
        pq.add(vtObj);

        VertexWeightPair1 vt = null;
        while(!pq.isEmpty())
        {
            vt = pq.poll();
            int minVertex = vt.getVertex();
            inMST[minVertex] = true;

            for(i = 0; i < edges.length; i++)
                for(j = 0; j < 2; j++)
                {
                    if(edges[i][j]==minVertex)
                    {
                        int adjVertex ;
                        int weight ;
                        if(j == 0)
                        {
                            adjVertex  = edges[i][1];
                        }
                        else
                        {
                            adjVertex = edges[i][0];
                        }
                        weight = edges[i][2];

                        if(!inMST[adjVertex] && key[adjVertex] > weight)
                        {
                            key[adjVertex] = weight;

                            pq.add(new VertexWeightPair1(key[adjVertex], adjVertex));
                            parent[adjVertex] = minVertex;
                        }
                    }
                }
        }

    int minMST = 0;
        for(i = 0; i < n; i++)
        {
            minMST = minMST + key[i];
        }
        return minMST;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        int[][] edges = new int[m][3];

        for (int i = 0; i < m; i++) {
            String[] edgesRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 3; j++) {
                int edgesItem = Integer.parseInt(edgesRowItems[j]);
                if(j == 0 || j == 1)
                    edges[i][j] = edgesItem - 1;
                else
                    edges[i][j] = edgesItem;
            }
        }

        int start = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int result = prims(n, edges, start-1);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
