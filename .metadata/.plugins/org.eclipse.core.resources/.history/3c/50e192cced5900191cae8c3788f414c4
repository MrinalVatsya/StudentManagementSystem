package com.mind.poc;
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

	private static LinkedList<Integer> adj[];

	private static int nodeCnt ;

	// Complete the roadsAndLibraries function below.
	static long roadsAndLibraries(int n, int c_lib, int c_road, int[][] cities) {

		int i, j;
		adj = new LinkedList[n];

		boolean visited[] = new boolean[n];
		for(i = 0; i < n; i++)
			visited[i] = false;

		for(i = 0 ; i < n; i++)
			adj[i] = new LinkedList<>();

		for(i = 0; i < cities.length; i++)
		{
			int u = cities[i][0];
			int v = cities[i][1];

			adj[u-1].add(v-1);
			adj[v-1].add(u-1);
		}
		
		long totalCost1 = 0L, totalCost2 = 0L;
		for(i = 0; i < n ; i++)
		{
			if(!visited[i])
			{
				nodeCnt = 0;
				dfsUtil(i,visited);
				totalCost1 += (nodeCnt-1)*c_road + c_lib;
			}
		}
		totalCost2 = (n*c_lib);
		if(totalCost1 < totalCost2)
			return totalCost1;
		else
			return totalCost2;
	}

	private static void dfsUtil(int u, boolean[] visited) {

		visited[u] = true;
		nodeCnt++;
		Stack<Integer> st = new Stack<>();
		st.push(u);
		
		while(!st.isEmpty())
		{
			int s = st.pop();
			if(!visited[s])
				visited[s] = true;
		}
		for(int i = 0; i < adj[u].size(); i++)
		{
			int v = adj[u].get(i);
			if(!visited[v])
				dfsUtil(v, visited);
		}
	}

	private static final Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) throws IOException {
		BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("D:\\Solution.txt"));

		int q = scanner.nextInt();
		scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

		for (int qItr = 0; qItr < q; qItr++) {
			String[] nmC_libC_road = scanner.nextLine().split(" ");

			int n = Integer.parseInt(nmC_libC_road[0]);

			int m = Integer.parseInt(nmC_libC_road[1]);

			int c_lib = Integer.parseInt(nmC_libC_road[2]);

			int c_road = Integer.parseInt(nmC_libC_road[3]);

			int[][] cities = new int[m][2];

			for (int i = 0; i < m; i++) {
				String[] citiesRowItems = scanner.nextLine().split(" ");
				scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

				for (int j = 0; j < 2; j++) {
					int citiesItem = Integer.parseInt(citiesRowItems[j]);
					cities[i][j] = citiesItem;
				}
			}

			long result = roadsAndLibraries(n, c_lib, c_road, cities);

			bufferedWriter.write(String.valueOf(result));
			bufferedWriter.newLine();
		}

		bufferedWriter.close();

		scanner.close();
	}
}

