/**
 * 
 */
package com.mind.poc;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

/**
 * @author mrinalvatsya
 *
 */
class MatCordinate{
	int src;
	
	public MatCordinate(int src, int dest) {
		super();
		this.src = src;
		this.dest = dest;
	}

	int dest;

	public int getSrc() {
		return src;
	}

	public void setSrc(int src) {
		this.src = src;
	}

	public int getDest() {
		return dest;
	}

	public void setDest(int dest) {
		this.dest = dest;
	}
	
}
public class CoinsOnTable {
	static int coinOnTheTable(int m, int k, String[] board) {
        /*
         * Write your code here.
         */
		int i , j , n = board.length;
		int mat[][] = new int[n][m];
		//simple BFS from stating to * cell..
		for(i = 0; i < n; i++)
		{
			for(j = 0; j < m ; j++)
			{
				mat[i][j] = board[i].charAt(j);
			}
		}
		
		Queue<MatCordinate> queue = new LinkedList<>();
		queue.add(new MatCordinate(0,0));
		
		int visited[][] = new int[n][m];
		
		while(!queue)
			
		

    }
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nmk = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nmk[0].trim());

        int m = Integer.parseInt(nmk[1].trim());

        int k = Integer.parseInt(nmk[2].trim());

        String[] board = new String[n];

        for (int boardItr = 0; boardItr < n; boardItr++) {
            String boardItem = scanner.nextLine();
            board[boardItr] = boardItem;
        }

        int result = coinOnTheTable(m, k, board);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}