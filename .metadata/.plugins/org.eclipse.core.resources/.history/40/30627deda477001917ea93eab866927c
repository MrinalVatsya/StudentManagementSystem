/**
 * 
 */
package com.mind.poc;

import java.util.ArrayList;

/**
 * @author mrinalvatsya
 *
 */
public class RootToLeafPathSum {


	private static ArrayList<ArrayList<Integer>> allPathList = new ArrayList<ArrayList<Integer>>();
	
	private static ArrayList<Integer> path = new ArrayList<>();
	
	 public int hasPathSum(TreeNode a, int b) {

	        boolean ans = hasPathSumUtil(a, b,0);
	        if(ans==true)
	         return 1;
	        else
	            return 0;
	    }

	    private boolean  hasPathSumUtil(TreeNode a, int b, int sum) {
	        
	         sum = sum + a.val;
	         path.add(a.val);
	        if(sum==b && a.left==null&&a.right==null)//check if it is leaf node or not..
	        {
	        	allPathList.add(path);
	            return true;
	        }
	     
	        boolean ans = false;
	        if(a.left != null)
	        {
	        ans = ans | hasPathSumUtil(a.left, b, sum);
	        }
	        
	        if(a.right != null)
	        {
	            ans = ans | hasPathSumUtil(a.right, b, sum);
	        }
	        if(path.size() > 0)
	        path.remove(path.size() - 1);
	        return ans;
	    }
	    
	    public ArrayList<ArrayList<Integer>> pathSum(TreeNode A, int B) {
	    	
	    	   boolean ans = hasPathSumUtil(a, b,0);
		       return allPathList;
	    }
}
