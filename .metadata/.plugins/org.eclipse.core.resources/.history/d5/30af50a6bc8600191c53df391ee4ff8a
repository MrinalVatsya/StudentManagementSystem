/**
 * 
 */
package com.mind.poc;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

import javafx.util.Pair;


/**
 * @author mrinalvatsya
 *
 */
class VertexWeightPair
{
	int key;

	int value;

	public int getKey() {
		return key;
	}

	public void setKey(int key) {
		this.key = key;
	}

	public int getValue() {
		return value;
	}

	public void setValue(int value) {
		this.value = value;
	}
}
public class DiameterNArrayTree {
	
	 public int solve(ArrayList<Integer> a) {
		 
		 int i = 0;
		 
		 int n = a.size();
		 ArrayList<ArrayList<Integer>> g = new ArrayList<>(n);
		 
		 for(i = 0; i < n; i++)
		 {
			 g.add(new ArrayList<>());
		 }
		 
		 for(i = 0; i < a.size(); i++)
		 {
			 int x = a.get(i);
			 if(x!=-1)
			 {
				 g.get(i).add(x);
				 g.get(x).add(i);
			 }
		 }
		 
		 Pair<Integer, Integer> x = bfs(0,g,n);
		 return bfs(x.getKey(), g, n).getValue();
	    }

	private Pair<Integer, Integer> bfs(int src, ArrayList<ArrayList<Integer>> g, int n) {
		
		int i;
		boolean visited[] = new boolean[n];
		for(i = 0; i < n; i++)
		{
			visited[i] = false;
		}
		
		Pair<Integer, Integer> srcDistPair = new Pair<Integer, Integer>(src, 0);
		Queue<Pair<Integer, Integer>> queue = new LinkedList<>();
		queue.add(srcDistPair);
		visited[src] = true;
		Pair<Integer, Integer> pair = null;
		Pair<Integer, Integer> ans = null;
		int diameter = Integer.MIN_VALUE;
		while(!queue.isEmpty())
		{
			pair = queue.poll();
			int u = pair.getKey();
			int dist = pair.getValue();
			if(diameter < dist)
			{
				diameter = Math.max(diameter, dist);
				ans = new Pair<Integer, Integer>(u, dist);
			}
			for(i = 0; i < g.get(u).size(); i++)
			{
				int v = g.get(u).get(i);
				if(!visited[v])
				{
					visited[v] = true;
					queue.add(new Pair<Integer, Integer>(v, dist+1));
				}
			}
		}
		return ans;
	}
	
	public static void main(String[] args) {
		
		DiameterNArrayTree obj = new DiameterNArrayTree();
		ArrayList<Integer> parentArray = new ArrayList<>();
		parentArray.add(-1);
		parentArray.add(0);
		parentArray.add(0);
		parentArray.add(0);
		parentArray.add(3);
		
		int res = obj.solve(parentArray);
		System.out.println(res);
	}

}
